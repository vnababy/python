{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "python",
      "provenance": [],
      "collapsed_sections": [],
      "authorship_tag": "ABX9TyPuqLIJX0fxLDqjqAPiHfVZ",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/vnababy/python/blob/main/python.lists\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "8XKXHlp2_XVl"
      },
      "outputs": [],
      "source": [
        ""
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        ""
      ],
      "metadata": {
        "id": "E7uJZJiPAYaO"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "variables:A variable is a named location used to store data in the memory.\n",
        "Constants:A constant is a type of variable whose value cannot be changed.\n"
      ],
      "metadata": {
        "id": "Dl4rR0sHAb0w"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        ""
      ],
      "metadata": {
        "id": "SxaLdVRD1m_0"
      }
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "1iTVvDagKNK1"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "SE4wC5SnSqIP"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        ""
      ],
      "metadata": {
        "id": "3Wipy1XkSt5C"
      }
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "wNOWFOFTSv0w"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "variables:"
      ],
      "metadata": {
        "id": "iDp_nE_lxTO4"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "a=90\n",
        "print(a)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4W4PO-5BxXS8",
        "outputId": "0782b9d9-ffd8-405d-e36c-1e8361b65b7e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "90\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a='baby'\n",
        "print(type(a))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FsY4OLJYxpIC",
        "outputId": "052bbe1b-02c2-4f04-a7bf-9ccf4517e789"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'str'>\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a=70\n",
        "b=20\n",
        "c=a\n",
        "print(a,b+c)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2fDiw16kyGoJ",
        "outputId": "75a304dd-7a6d-4246-900c-85ab6cc43da3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "70 90\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a=40\n",
        "b=a\n",
        "print(a)\n",
        "print(b)\n",
        "id(a)\n",
        "a=900\n",
        "print(id(a))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PuNwGyVAybk1",
        "outputId": "5cca5ffa-4738-449f-c999-5850f3756143"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "40\n",
            "40\n",
            "140182409608272\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a=40\n",
        "b=a\n",
        "print(a)\n",
        "print(b)\n",
        "id(a)\n",
        "a=900\n",
        "print(id(a))\n",
        "print(id(b))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "4e4cc0e3-4655-4afb-c48b-7c1213e321f0",
        "id": "rxZBVLT9za4C"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "40\n",
            "40\n",
            "140182409608016\n",
            "94865380052704\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Declaring a function  \n",
        "def sub():  \n",
        "    # Defining local variables. They has scope only within a function  \n",
        "    a = 20  \n",
        "    b = 30  \n",
        "    c = a - b  \n",
        "    print(\"The sum is:\", c)  \n",
        "  \n",
        "# Calling a function  \n",
        "sub()  "
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "W13h8A3Vzo1x",
        "outputId": "467341f1-ba51-484c-807b-6f018c8f3346"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The sum is: -10\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Declaring a function  \n",
        "def add():  \n",
        "    # Defining local variables. They has scope only within a function  \n",
        "    a = 20  \n",
        "    b = 30  \n",
        "    c = a + b  \n",
        "    print(\"The sum is:\", c)  \n",
        "    # Calling a function\n",
        "    add()\n",
        "  \n"
      ],
      "metadata": {
        "id": "V7-dfiU80NOR"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "a=28\n",
        "b=40\n",
        "c=50\n",
        "print(a,b)\n",
        "global a\n",
        "a= 'iam super'\n",
        "print(a)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Ey-rJz2y0pB-",
        "outputId": "7eaa2cc5-3c04-4a29-cb52-91266136afa5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "28 40\n",
            "iam super\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a=28\n",
        "b=40\n",
        "c=50\n",
        "print(a,b)\n",
        "global a\n",
        "a= 'iam super'\n",
        "print(a)\n",
        "del b\n",
        "print(b)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 235
        },
        "id": "E7rG7I8e14PB",
        "outputId": "a6d7fd05-8910-4f49-835e-17610e2a9cf4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "28 40\n",
            "iam super\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-16-39797a83b49b>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0;32mdel\u001b[0m \u001b[0mb\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 9\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mb\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m: name 'b' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a = 0  \n",
        "while a < 10:  \n",
        "  a += 1   \n",
        "  if a == 5:  \n",
        "    continue  \n",
        "  print(a)  "
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CBhvAGGP2SIf",
        "outputId": "d094fe2c-3036-4e01-a3de-b27ccba27bc7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1\n",
            "2\n",
            "3\n",
            "4\n",
            "6\n",
            "7\n",
            "8\n",
            "9\n",
            "10\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a=8\n",
        "b=3\n",
        "c=40\n",
        "d=5\n",
        "e=2\n",
        "print(a,a+b+c,d+e)\n",
        "print(d-2)\n",
        "print(a/b)\n",
        "print(a*c*e)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KNM0JtkOFFgI",
        "outputId": "56404f71-145e-4d1a-810c-822be03e0343"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "8 51 7\n",
            "3\n",
            "2.6666666666666665\n",
            "640\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "6hkbdkznGHyq"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "a = 0  \n",
        "while a < 5:  \n",
        "  a += 1   \n",
        "  if a == 5:  \n",
        "    continue  \n",
        "  print(a)  "
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NyCNZ9R-6MUU",
        "outputId": "5e005d9b-94c0-46cb-cf68-333895a4754d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1\n",
            "2\n",
            "3\n",
            "4\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a=30\n",
        "b=90\n",
        "b==a\n",
        "print(a)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WN0B_KcjS3pQ",
        "outputId": "752244aa-a973-4cf5-e114-836760eb2c82"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "30\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "h=6\n",
        "w=10\n",
        "h>w\n",
        "print(h>w)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "x1z-EMtUUuWi",
        "outputId": "cab65a3b-92e0-4f76-e79a-12262ad1f89d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "False\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "h=6\n",
        "w=10\n",
        "x=20\n",
        "y=30\n",
        "x==y\n",
        "h!=w\n",
        "x<=y\n",
        "x>=y\n",
        "h>w\n",
        "print(h>w)\n",
        "print(y)\n",
        "print(h!=w)\n",
        "print(x<=y)\n",
        "print(x>=y)\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NZENQlObVZBo",
        "outputId": "18f67d67-fe85-4ac1-ae2c-604f551efce7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "False\n",
            "30\n",
            "True\n",
            "True\n",
            "False\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a='vna'\n",
        "b='sama'\n",
        "print(a and b)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KANw35hxWvmu",
        "outputId": "51f6250e-e792-4029-911c-2a3dd19e1e58"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "sama\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a='vna'\n",
        "b='sama'\n",
        "print(a or b)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Xb89bh9KKWkp",
        "outputId": "a6209dd1-5e02-42f3-c95e-22887eed9e5b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "vna\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a=baby\n",
        "b=cutie\n",
        "c=akki\n",
        "d=pallu\n",
        "d\n",
        "print()"
      ],
      "metadata": {
        "id": "Mb7tm7iDKt_6"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# If the number is positive, we print an appropriate message\n",
        "\n",
        "num = 3\n",
        "if num > 0:\n",
        "    print(num, \"is a positive number.\")\n",
        "print(\"This is always printed.\")\n",
        "\n",
        "num = -1\n",
        "if num > 0:\n",
        "    print(num, \"is a positive number.\")\n",
        "print(\"This is also always printed.\")"
      ],
      "metadata": {
        "id": "fu0Hf78hZYUY",
        "outputId": "eba9d85d-d3ba-4c38-80d0-8d08b6a10806",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "3 is a positive number.\n",
            "This is always printed.\n",
            "This is also always printed.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a=3\n",
        "b=4\n",
        "c=6\n",
        "if a and b and c:\n",
        "  print(\"a is smallest number\")\n",
        "if b>c:\n",
        "    print(\"c is the larger than b\")\n",
        "else:\n",
        "  print(\"c is the largest number\")\n",
        "  "
      ],
      "metadata": {
        "id": "AaLFa45YMkPh",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e80f4915-beff-44c3-9aab-6392d1a6c036"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "a is smallest number\n",
            "c is the largest number\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a=3\n",
        "b=4\n",
        "c=6\n",
        "if a<b or c>b:\n",
        "  print(\"a is smallest number\")\n",
        "if b>c:\n",
        "    print(\"c is the larger than b\")\n",
        "else:\n",
        "  print(\"c is the largest number\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "r5V6loZmOyr5",
        "outputId": "61ee8a8b-7ee7-46de-a972-ff9dd8da957d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "a is smallest number\n",
            "c is the largest number\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "age=21\n",
        "if age>=21:\n",
        "  print(\"able to vote\")\n",
        "else:\n",
        "  print(\"unable to vote\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "N26CuP8CPYlY",
        "outputId": "03350999-c87d-42f7-f4d4-7d3c9a00a129"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "able to vote\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "age=21\n",
        "if not age>=21:\n",
        "  print(\"able to vote\")\n",
        "else:\n",
        "  print(\"unable to vote\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GfxtdxJ_P48y",
        "outputId": "34513542-44be-4a43-d258-661fa04caba4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "unable to vote\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a = 50\n",
        " \n",
        "# Assign value\n",
        "b = a\n",
        "print(b)\n",
        " \n",
        "# Add and assign value\n",
        "b += a\n",
        "print(b)\n",
        " \n",
        "# Subtract and assign value\n",
        "b -= a\n",
        "print(b)\n",
        " \n",
        "# multiply and assign\n",
        "b *= a\n",
        "print(b)\n",
        " \n",
        "# bitwise lishift operator\n",
        "b <<= a\n",
        "print(b)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rggJBctXQAtG",
        "outputId": "27c228fd-dbf0-4571-80ba-cd245b29e7a8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "50\n",
            "100\n",
            "50\n",
            "2500\n",
            "2814749767106560000\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x = 24\n",
        "y = 20\n",
        "list1 = [10, 20, 30, 40, 50]\n",
        "list2 = [10, 20,24, 30, 40, 50]\n",
        " \n",
        "if (x not in list1):\n",
        "    print(\"x is NOT present in given list\")\n",
        "else:\n",
        "    print(\"x is present in given list\")\n",
        " \n",
        "if (y in list2):\n",
        "    print(\"y is present in given list\")\n",
        "else:\n",
        "    print(\"y is NOT present in given list\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "R4CNiGnjSMsA",
        "outputId": "59b6e8eb-1cc7-4ba8-ade8-a20ae3253144"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "x is NOT present in given list\n",
            "y is present in given list\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "age=int(input('enter the age'))\n",
        "\n",
        "if age >=18:\n",
        "\n",
        "  print(\"able to vote\")\n",
        "else:\n",
        "    print(\"unable to vote\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uzbqKqDITk6p",
        "outputId": "4c65cfc7-02b0-4991-df9c-e88b9eefcc5b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "enter the age60\n",
            "able to vote\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "age=int(input(\"Enter your age\"))\n",
        "if age >=18:\n",
        "   print(\"Eligible for voting\")\n",
        "else:\n",
        "   print(\"not eligible for voting\")"
      ],
      "metadata": {
        "id": "_GDbF3LujB-D"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "num=int(input(\"enter the number\"))\n",
        "if num %3==0:\n",
        "  print(\"the number is even\")\n",
        "else:\n",
        "  print(\"the number is odd\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MCe3c7cZjyrA",
        "outputId": "ff995759-93bb-4c12-e70f-1b30db2ba1a9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "enter the number2\n",
            "the number is odd\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a=21\n",
        "b=7\n",
        "if a //b:\n",
        "  print(\"it is divisible by 7\")\n",
        "else:\n",
        "  print(\"it is not divisible by 7\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ELnmD_Hel36h",
        "outputId": "3dadccf4-2738-4492-8782-4bfe251dfc5f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "it is divisable by 7\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        ""
      ],
      "metadata": {
        "id": "4WwrOwVGnLLk"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Write a program to display \"Hello\" if a number entered by user is a multiple of five , \n",
        "otherwise print \"Bye\"."
      ],
      "metadata": {
        "id": "8O7O0op6nKQs"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "num=int(input(\"enter the number\"))\n",
        "if num %5==0:\n",
        "  print(\"hello\")\n",
        "else:\n",
        "  print(\"bye\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "61FMdN80m3rZ",
        "outputId": "8da945f8-f31c-4b2f-8ace-ae51575d36e0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "enter the number45\n",
            "hello\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        " Write a program to calculate the electricity bill (accept number of unit from user) according to the following criteria :\n",
        "             Unit                                                     Price  \n",
        "First 100 units                                               no charge\n",
        "Next 100 units                                              Rs 5 per unit\n",
        "After 200 units                                             Rs 10 per unit\n",
        "(For example if input unit is 350 than total bill amount is Rs2000)"
      ],
      "metadata": {
        "id": "wNs6rLhA5FLj"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "amt=0\n",
        "nu=int(input(\"Enter number of electric unit\"))\n",
        "if nu<=100:\n",
        "     amt=0\n",
        "if nu>100 and nu<=200:\n",
        "     amt=(nu-100)*5\n",
        "if nu>200:\n",
        "     amt=500+(nu-200)*10\n",
        "print(\"Amount to pay :\",amt)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EdSL2jffy3hy",
        "outputId": "591425f1-257f-4fdf-c0f1-94e3a60c7d3f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter number of electric unit400\n",
            "Amount to pay : 2500\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "num=int(input(\"enter the number\"))\n",
        "if num %10:\n",
        "  print(\"the last digit of a number\")\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "M-u-nlQq5GpY",
        "outputId": "01708c36-ff73-4612-c92f-8894349b1cdc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "enter the number7\n",
            "the last digit of a number\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "num=int(input(\"enter the number\"))\n",
        "if num %3==0:\n",
        "  print(\"it is divisible by 3\")\n",
        "else:\n",
        "  print(\"it is not  divisible by 3\")\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mEYyGp7M8Q7K",
        "outputId": "aa49eb86-fce4-4a0b-b669-d1140c221957"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "enter the number9\n",
            "it is divisible by 3\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Write a program to check whether the last digit of a number( entered by user ) is \n",
        "divisible by 3 or not."
      ],
      "metadata": {
        "id": "pOx5CPag-Mfy"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "num=int(input(\"Enter any number\"))\n",
        "ld=num%10\n",
        "if ld%3==0:\n",
        "     print(\"Last digit of number is divisible by 3 \")\n",
        "else:\n",
        "     print(\"Last digit of number is not divisible by 3 \")"
      ],
      "metadata": {
        "id": "_bdtB5jE-LOq"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Write a program to accept percentage from the user and display the grade according to the following criteria:\n",
        "\n",
        "         Marks                                    Grade\n",
        "         > 90                                         A\n",
        "         > 80 and <= 90                       B\n",
        "         >= 60 and <= 80                       C\n",
        "         below 60                                  D"
      ],
      "metadata": {
        "id": "n7gB0xt5p71K"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "num=int(input(\"enter any number\"))\n",
        "if num>90:\n",
        "  print(\"the grade is 'A'\")\n",
        "if num>80 and num<=90:\n",
        "  print(\"the grade is 'B'\")\n",
        "if num>=60 and num<=80:\n",
        "  print(\"the grade is 'c'\")\n",
        "if num<=60:\n",
        "  print(\"the grade is 'D'\")"
      ],
      "metadata": {
        "id": "5QVGYxRu80_W",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "da1a4641-9ddf-4494-be51-750f102e2e91"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "enter any number70\n",
            "the grade is 'c'\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Write a program to calculate the electricity bill (accept number of unit from user) according to the following criteria :\n",
        "             Unit                                                     Price  \n",
        "First 100 units                                               no charge\n",
        "Next 100 units                                              Rs 5 per unit\n",
        "After 200 units                                             Rs 10 per unit\n",
        "(For example if input unit is 350 than total bill amount is Rs2000)"
      ],
      "metadata": {
        "id": "qGxRpDnmuzo5"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "num=int(input(\"enter the the umits\"))\n",
        "if num<=100:\n",
        "  print('bill amt is zero since units <100')\n",
        "  \n",
        "elif  num>100 and num<=200:\n",
        "  num=num-100\n",
        "  print(num*5)\n",
        "elif num>200:\n",
        "  \n",
        "  num1=num-100\n",
        "  num2=num1-100\n",
        "  sum=num2*10+100*5\n",
        "\n",
        "  print(sum)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sdyFJ7efprWq",
        "outputId": "8d62ba6d-d8c3-47cc-f9a8-1291293d9025"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "enter the the umits350\n",
            "2000\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Write a program to accept the cost price of a bike and display the road tax to be paid according to the following criteria :\n",
        "    \n",
        "        Cost price (in Rs)                                       Tax\n",
        "        > 100000                                                  15 %\n",
        "        > 50000 and <= 100000                          10%\n",
        "        <= 50000                                                  5%"
      ],
      "metadata": {
        "id": "qgvxOaKXYtva"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "cost=int(input('enter the cost of the bike'))\n",
        "if cost>100000:\n",
        "  tax=0\n",
        "  tax = 15/100*cost\n",
        "\n",
        "\n",
        "elif cost >50000 and cost <=100000:\n",
        "  tax = 10/100*cost\n",
        " \n",
        "else:\n",
        "  tax = 5/100*cost\n",
        "  print('the tax')       \n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "          "
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "F_efWnSZYwcS",
        "outputId": "651f541f-14b2-4a54-dc9e-e982d1342f78"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "enter the cost of the bike8000\n",
            "the tax\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "year=int(input('enter the year'))\n",
        "if (year %400==0) and (year %100==0):\n",
        "  print('it s a leap year')\n",
        "if  (year %4==0) and (year %100!=0):\n",
        "  print('it s not a leap year')\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jzYHFpb8flFG",
        "outputId": "47d156b3-1853-4a9a-fe21-72029f4e3183"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "enter the year1996\n",
            "it s not a leap year\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "kLr6hOIsgk9Y"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "day=int(input('Enter the weekday 1-7'))\n",
        "if day==1:\n",
        "  print('day, sunday')\n",
        "elif day==2:\n",
        "  print('day, monday')\n",
        "elif day==3:\n",
        "  print('day, tuesday')\n",
        "elif day==4:\n",
        "  print('day, wednesday')\n",
        "elif day==5:\n",
        "  print('day, thursday')\n",
        "elif day==6:\n",
        "  print('day, friday')\n",
        "elif day==7:\n",
        "  print('day, saturday')\n",
        "else:\n",
        "  print('day')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZvJls7mHfk0j",
        "outputId": "58a769e8-9f3e-4652-9b94-33856eec462a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter the weekday 1-77\n",
            "day, saturday\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "month=int(input('Enter the day 1-12'))\n",
        "if month==1:\n",
        "  print('jan')\n",
        "else:\n",
        "    print(stop)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Dw28lm2rpOzh",
        "outputId": "eb1af274-bc0a-41fe-d4f4-bef60d90d245"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter the day 1-311\n",
            "jan\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "city=input('Enter the city ')\n",
        "if city ==\"delhi\":\n",
        "  print('Red Fort')\n",
        "else:\n",
        "    print(worng)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "q-VuxagdrHt6",
        "outputId": "bbc5c464-effe-4b22-d404-74b9194da017"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter the city delhi\n",
            "Red Fort\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "MDdYXWEeQ1Aq"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "o2cQ2uR_Q4CK"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "a=9\n",
        "if (a > 5 and a <=10):    \n",
        "  print(\"Hello\")    \n",
        "else:    \n",
        "  print(\"Bye\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5NRAk6OdstYg",
        "outputId": "952c1cca-9cc3-42e5-adef-a619d40eebc3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Hello\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Write a program to check whether a number entered is three digit number or not."
      ],
      "metadata": {
        "id": "7l3_uuZ0t0Wu"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "num1 = int(input(\"Enter first number\"))\n",
        "num2 = int(input(\"Enter second number\"))\n",
        "if num1 > num2:\n",
        "     print(\"smaller number is :\", num2)\n",
        "else:\n",
        "     print(\"smaller number is :\", num1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uLf5DJCtt1KA",
        "outputId": "f186fb37-17e0-4d70-f28c-f5c4d959569a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter first number50\n",
            "Enter second number90\n",
            "smaller number is : 50\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "for i in \"google\":\n",
        "  print(i)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bCzlBS5SvxsE",
        "outputId": "f7b9d2fa-53b2-4743-d3cd-8c4260ee1e4f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "g\n",
            "o\n",
            "o\n",
            "g\n",
            "l\n",
            "e\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a=[\"aba,cvb,dae,qzx,xyz\"]\n",
        "for a in a:\n",
        "  print(a)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "e2oMoS-MwCmh",
        "outputId": "373fd490-cd74-455b-a8fe-c5bbaee93fbf"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "aba,cvb,dae,qzx,xyz\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a=[\"aba,cvb,dae,qzx,xyz\"]\n",
        "for i in range(len(a)):\n",
        "  print(a[i])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rzrq41yowuvB",
        "outputId": "d9c13a60-dee4-4e8e-c26f-895c5ccf8584"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "aba,cvb,dae,qzx,xyz\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "num1 = (input(\"Enter any number\")\n",
        "l=len(num1)\n",
        "if l != 3:\n",
        "     print(\"Enter three digit number\")\n",
        "else:\n",
        "     print(\"Middle digit is \",(int(num1)%100//10))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 135
        },
        "id": "kZZG_aTAQ6Cg",
        "outputId": "c65a25f7-c9b7-477c-fcc9-7f861e7f2fae"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "SyntaxError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-3-42f42ae7cc9c>\"\u001b[0;36m, line \u001b[0;32m2\u001b[0m\n\u001b[0;31m    l=len(num1)\u001b[0m\n\u001b[0m    ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# once data is create it can't be modified\n",
        "l=[1,2,3,4,4]\n",
        "11=[\"raju\",\"ravi\",\"john\"]\n",
        "l.append(5)\n",
        "print(l)\n",
        "\n",
        "# once data is create it can't be modified\n",
        "t=(1,2,3,4,4)\n",
        "print(t)\n",
        "print(type(t))\n",
        "\n",
        "print(type(l))\n",
        "s={1,2,3,4,4}\n",
        "print(s)\n",
        "print(type(s))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 135
        },
        "id": "8ooQqZ9SRwbe",
        "outputId": "e4e8a7af-43b7-4c97-d157-a128da7bc7f1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "SyntaxError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-1-86fdb62d1454>\"\u001b[0;36m, line \u001b[0;32m3\u001b[0m\n\u001b[0;31m    11=[\"raju\",\"ravi\",\"john\"]\u001b[0m\n\u001b[0m                             ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m can't assign to literal\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "n = int(input(\"Enter number: \")) # 5\n",
        "if(n == 0 or n < 0):\n",
        "    print(\"Value of n should be greater than 1\")\n",
        "else:\n",
        "    fact = 1\n",
        "    while(n):\n",
        "        fact *= n\n",
        "        n = n-1\n",
        "    print(f\"Factorial is {fact} \")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tjZcZr5FSjyu",
        "outputId": "02ce14a1-60d3-40dc-a5c5-db38ce7d1679"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter number: 5\n",
            "Factorial is 120 \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "num = int(input(\"enter a number: \"))\n",
        "fac = 1\n",
        "for i in range(1, num + 1):\n",
        "  fac = fac * i\n",
        "print(\"factorial of \", num, \" is \", fac)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OI-hbqq0Yr1K",
        "outputId": "42cc2f0a-cf47-4390-8cb3-b34707e8bfa0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "enter a number: 4\n",
            "factorial of  4  is  24\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "n = int(input(\"Enter number: \"))\n",
        "rev = 0\n",
        "\n",
        "while(n != 0):\n",
        "   rem = n % 10\n",
        "   rev = rev * 10 + rem\n",
        "   n = n // 10\n",
        "\n",
        "print(rev)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "P4ki6SgTbDH9",
        "outputId": "1e5f92d4-5c8a-4795-a8bb-b42e49c4bcd1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter number: 43521\n",
            "12534\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "num = int(input(\"Enter number: \"))\n",
        "while(n!=0):\n",
        "  print(n, end=\" \")\n",
        "  n = n - 1\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pFhvHA0ahggq",
        "outputId": "59a27fcf-c5c7-4002-f9b2-2ad2fced028f"
      },
      "execution_count": null,
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Enter number: 3\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "list=[7,14,21,25,28,35,42,49]\n",
        "n=0\n",
        "for i in list:\n",
        "  if i%7==0:\n",
        "    print('table')\n",
        "    n=n-1\n",
        " if n==8:\n",
        " break"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 135
        },
        "id": "Zuu-guvHmGn6",
        "outputId": "67c92706-2c7b-45f5-f195-8cf28c2ae8bb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "IndentationError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-31-624119b397a2>\"\u001b[0;36m, line \u001b[0;32m7\u001b[0m\n\u001b[0;31m    if n==8:\u001b[0m\n\u001b[0m            ^\u001b[0m\n\u001b[0;31mIndentationError\u001b[0m\u001b[0;31m:\u001b[0m unindent does not match any outer indentation level\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "txt=\"python\"[::-1]\n",
        "print(txt)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tAXBNARFhQbE",
        "outputId": "44e258a9-8827-4f12-8f11-36122623b5d1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "nohtyp\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "list =[1,2,3,4,5]  \n",
        "\n",
        "#1iteration=execution of for loop one time\n",
        "for i in list:\n",
        "  if i==4:\n",
        "    break\n",
        "  print(i) "
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2NvR5sz0lSIE",
        "outputId": "9a7c520a-8303-460e-dc2b-07fcb25050c3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1\n",
            "2\n",
            "3\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "str = input(\"Enter reverse: \")\n",
        "for i in range(len(str)-1,-1,-1):\n",
        "  print(str[i],end=\" \")\n",
        "  "
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BPeEsmv_i568",
        "outputId": "b39b47ca-b45c-45dc-c2b4-b43ea8b87bc3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter reverse: veena\n",
            "a n e e v "
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "RC6peFWTLXPm"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "x = [2,3,4,5,6,7,8]\n",
        "z = []\n",
        "for i in x:\n",
        "  z.append(i*i)\n",
        "  print(z)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MXfm_uBCoxr9",
        "outputId": "445caa95-1e13-40a1-93b0-0e6206e2d213"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[4]\n",
            "[4, 9]\n",
            "[4, 9, 16]\n",
            "[4, 9, 16, 25]\n",
            "[4, 9, 16, 25, 36]\n",
            "[4, 9, 16, 25, 36, 49]\n",
            "[4, 9, 16, 25, 36, 49, 64]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dic = {'val1':10, 'val2':20, 'val3':23, 'val4':22 }\n",
        "for i in dic.values():\n",
        "  if i % 2 ==0:\n",
        "    print(i,end=\" \")\n",
        "  else:\n",
        "    pass\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5cBL3NrJJYZx",
        "outputId": "12756540-2141-47cd-d74b-692c343e5539"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "10 20 22 "
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Employee = {\"Name\": \"John\", \"Age\": 29, \"salary\":25000,\"Company\":\"GOOGLE\"}  \n",
        "print(type(Employee))  \n",
        "print(\"printing Employee data .... \")  \n",
        "print(\"Name : %s\" %Employee[\"Name\"])  \n",
        "print(\"Age : %d\" %Employee[\"Age\"])  \n",
        "print(\"Salary : %d\" %Employee[\"salary\"])  \n",
        "print(\"Company : %s\" %Employee[\"Company\"]) "
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "s3j-1hXvLYj7",
        "outputId": "dd4d808f-d1cf-43ac-82a7-de7cf3391c8e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'dict'>\n",
            "printing Employee data .... \n",
            "Name : John\n",
            "Age : 29\n",
            "Salary : 25000\n",
            "Company : GOOGLE\n"
          ]
        }
      ]
    }
  ]
}